/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) 
    {
        if(!root)
        {
            return 0;
        }
        queue<pair<TreeNode*,unsigned long long int>> q;
        q.push({root,0});
        unsigned long long int maxwidth = 0;
        
       
        while(!q.empty())
        {
            int s = q.size();
            unsigned long long int bleh = q.front().second;
            unsigned long long int index;
            for(int i=0;i<s;i++)
            {
                pair<TreeNode*,unsigned long long int> temp = q.front();
                index = temp.second;
                q.pop();
                if(temp.first->left)
                {
                    q.push(make_pair(temp.first->left,2*index));
                }
                if(temp.first->right)
                {
                    q.push(make_pair(temp.first->right,(2*index)+1));
                }
                
            }
            unsigned long long int width = index - bleh + 1;
            if(width>maxwidth)
            {
                maxwidth = width;
            }
                
        }
        return maxwidth;
        
    }
};
